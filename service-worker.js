!function(){"use strict";const e=["client/index.e5fcd8f5.js","client/index.e550012c.js","client/apps.b3bef5a1.js","client/about.4c68d454.js","client/mjukna-transition.2bbe2b03.js","client/test2.586601e1.js","client/test3.01da62d5.js","client/[slug].65c06bbb.js","client/client.cfafbda5.js","client/test.2f28bfac.js","client/client.457d9e9f.js"].concat(["service-worker-index.html","app_icons/cards_icon.png","app_icons/corners_icon.png","app_icons/index_icon.png","app_icons/trails_icon.png","app_icons/weather_icon.png","favicon.png","fonts/Volterra-Regular.otf","fonts/Volterra-italic.otf","global.css","icons/icon-arrow-down.svg","icons/icon-github.svg","icons/icon-info.svg","icons/icon-play-store.svg","manifest.json","screenshots/cards/AddCard.jpg","screenshots/cards/AddExpense.jpg","screenshots/cards/BottomDrawer.jpg","screenshots/cards/Home.jpg","screenshots/corners/IndividualCorner.jpg","screenshots/corners/Main.jpg","screenshots/corners/MoreSettings.jpg","screenshots/index/Drawer.jpg","screenshots/index/Inbox.jpg","screenshots/trails/Area.png","screenshots/trails/Dark Mode.png","screenshots/trails/Explore.png","screenshots/trails/Favorites.png","screenshots/trails/Maps.png","screenshots/trails/Search.png","screenshots/weather/Home.jpg","screenshots/weather/MainGraph.jpg","screenshots/weather/Rain.jpg","screenshots/weather/Temperature.jpg","screenshots/weather/UVIndex.jpg","screenshots/weather/Wind.jpg"]),s=new Set(e);self.addEventListener("install",s=>{s.waitUntil(caches.open("cache1587651350108").then(s=>s.addAll(e)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",e=>{e.waitUntil(caches.keys().then(async e=>{for(const s of e)"cache1587651350108"!==s&&await caches.delete(s);self.clients.claim()}))}),self.addEventListener("fetch",e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const t=new URL(e.request.url);t.protocol.startsWith("http")&&(t.hostname===self.location.hostname&&t.port!==self.location.port||(t.host===self.location.host&&s.has(t.pathname)?e.respondWith(caches.match(e.request)):"only-if-cached"!==e.request.cache&&e.respondWith(caches.open("offline1587651350108").then(async s=>{try{const t=await fetch(e.request);return s.put(e.request,t.clone()),t}catch(t){const n=await s.match(e.request);if(n)return n;throw t}}))))})}();
